plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
    id 'checkstyle'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'org.openapi.generator' version '6.6.0'  // Добавлен плагин OpenAPI Generator
}

group = 'ru.mentee.library'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

repositories {
    mavenCentral()
}

ext {
    versions = [
            postgresql       : '42.6.0',
            lombok           : '1.18.30',
            slf4j            : '2.0.9',
            logback          : '1.4.14',
            junit            : '5.10.0',
            assertj          : '3.24.2',
            mockito          : '5.7.0',
            testcontainers   : '1.19.7',
            h2               : '2.2.224',
            googleJavaFormat : '1.17.0',
            jackson          : '2.17.0',
            jaxbApi          : '4.0.0',
            jaxbRuntime      : '4.0.2',
            openapiGenerator : '6.6.0',  // Добавлена версия OpenAPI Generator
            springdoc        : '2.5.0'
    ]
}

dependencies {
    // Spring Boot starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.liquibase:liquibase-core'

    // Database
    runtimeOnly "org.postgresql:postgresql:${versions.postgresql}"
    testImplementation "com.h2database:h2:${versions.h2}"

    // Lombok
    compileOnly "org.projectlombok:lombok:${versions.lombok}"
    annotationProcessor "org.projectlombok:lombok:${versions.lombok}"
    testCompileOnly "org.projectlombok:lombok:${versions.lombok}"
    testAnnotationProcessor "org.projectlombok:lombok:${versions.lombok}"

    // Logging
    implementation "org.slf4j:slf4j-api:${versions.slf4j}"
    implementation "ch.qos.logback:logback-classic:${versions.logback}"
    implementation "ch.qos.logback:logback-core:${versions.logback}"

    // Jackson
    implementation "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
    implementation "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${versions.jackson}"

    // JAXB
    implementation "jakarta.xml.bind:jakarta.xml.bind-api:${versions.jaxbApi}"
    implementation "org.glassfish.jaxb:jaxb-runtime:${versions.jaxbRuntime}"

    // OpenAPI
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${versions.springdoc}"
    implementation "org.openapitools:jackson-databind-nullable:0.2.6"
    implementation "io.swagger.core.v3:swagger-annotations:2.2.20"
    implementation "javax.annotation:javax.annotation-api:1.3.2"

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation platform("org.junit:junit-bom:${versions.junit}")
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "org.mockito:mockito-junit-jupiter:${versions.mockito}"
    testImplementation "org.assertj:assertj-core:${versions.assertj}"
    testImplementation "org.testcontainers:testcontainers:${versions.testcontainers}"
    testImplementation "org.testcontainers:junit-jupiter:${versions.testcontainers}"
    testImplementation "org.testcontainers:postgresql:${versions.testcontainers}"
}

// Конфигурация OpenAPI Generator
openApiGenerate {
    generatorName = "spring"
    inputSpec = "C:\\Users\\danil\\IdeaProjects\\enterprice-spring\\src\\main\\resources\\api\\task-management-api.yaml"
    outputDir = "$buildDir/generated"
    apiPackage = "ru.mentee.api.generated.controller"
    modelPackage = "ru.mentee.api.generated.dto"
    configOptions = [
            dateLibrary: "java8",
            interfaceOnly: "true",
            useTags: "true",
            performBeanValidation: "true",
            useBeanValidation: "true",
            useSpringBoot3: "true",
            delegatePattern: "true",
            openApiNullable: "false"
    ]
}

// Добавляем сгенерированный код в classpath
sourceSets {
    main {
        java {
            srcDirs += "$buildDir/generated/src/main/java"
        }
    }
}

// Остальные конфигурации (checkstyle, test, jacoco, spotless) остаются без изменений
checkstyle {
    toolVersion = '10.12.5'
    configFile = file("${rootDir}/config/checkstyle/google_checks.xml")
    maxErrors = 0
    maxWarnings = -1
    ignoreFailures = true
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
}

tasks.named('check') {
    dependsOn jacocoTestReport
}

spotless {
    java {
        target 'src/**/*.java'
        googleJavaFormat("${versions.googleJavaFormat}").aosp().reflowLongStrings().skipJavadocFormatting()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
        licenseHeader '/* @MENTEE_POWER (C)$YEAR */'
    }

    sql {
        target 'src/**/*.sql'
        dbeaver()
    }

    format 'misc', {
        target '*.gradle', '*.md', '.gitignore', '.gitattributes'
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
}

// Зависимость между компиляцией Java и генерацией OpenAPI
compileJava.dependsOn tasks.named('openApiGenerate')
