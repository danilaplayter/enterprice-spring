openapi: 3.0.3
info:
  title: Task Management API
  version: 1.0.0
  description: RESTful API для управления задачами

servers:
  - url: http://localhost:8080/api/v1
    description: Local development server

paths:
  /tasks:
    get:
      summary: Получить список задач
      operationId: getTasks
      tags:
        - Tasks
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [TODO, IN_PROGRESS, DONE]
        - name: assignee
          in: query
          schema:
            type: string
        - name: priority
          in: query
          schema:
            type: string
            enum: [LOW, MEDIUM, HIGH, CRITICAL]
        - name: sort
          in: query
          schema:
            type: string
            pattern: '^[a-zA-Z]+:(asc|desc)(,[a-zA-Z]+:(asc|desc))*$'
            example: "priority:desc,createdAt:asc"
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
      responses:
        '200':
          description: Список задач
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'

    post:
      summary: Создать новую задачу
      operationId: createTask
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Задача создана
          headers:
            Location:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /tasks/{taskId}:
    get:
      summary: Получить задачу по ID
      operationId: getTaskById
      tags:
        - Tasks
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Информация о задаче
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Обновить задачу
      operationId: updateTask
      tags:
        - Tasks
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: Задача обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

    patch:
      summary: Частично обновить задачу
      operationId: patchTask
      tags:
        - Tasks
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/JsonPatchOperation'
      responses:
        '200':
          description: Задача обновлена

    delete:
      summary: Удалить задачу
      operationId: deleteTask
      tags:
        - Tasks
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Задача удалена

  /tasks/{taskId}/comments:
    get:
      summary: Получить комментарии к задаче
      operationId: getTaskComments
      tags:
        - Comments
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Список комментариев
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentListResponse'

components:
  schemas:
    Task:
      type: object
      required:
        - id
        - title
        - status
        - priority
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [TODO, IN_PROGRESS, DONE]
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH, CRITICAL]
        assignee:
          type: string
        dueDate:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        _links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/Link'
            comments:
              $ref: '#/components/schemas/Link'
            assignee:
              $ref: '#/components/schemas/Link'

    CreateTaskRequest:
      type: object
      required:
        - title
        - priority
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 200
        description:
          type: string
          maxLength: 2000
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH, CRITICAL]
        assignee:
          type: string
        dueDate:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string

    UpdateTaskRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 200
        description:
          type: string
          maxLength: 2000
        status:
          type: string
          enum: [TODO, IN_PROGRESS, DONE]
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH, CRITICAL]
        assignee:
          type: string
        dueDate:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string

    JsonPatchOperation:
      type: object
      required:
        - op
        - path
      properties:
        op:
          type: string
          enum: [add, remove, replace, move, copy, test]
        path:
          type: string
        value:
          type: string
        from:
          type: string

    TaskListResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        page:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer

    Comment:
      type: object
      required:
        - id
        - text
        - author
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        text:
          type: string
          maxLength: 2000
        author:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CommentListResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        page:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer

    Link:
      type: object
      properties:
        href:
          type: string
        method:
          type: string
          enum: [GET, POST, PUT, PATCH, DELETE]

  parameters:
    PageParam:
      name: page
      in: query
      description: Номер страницы (начиная с 0)
      schema:
        type: integer
        minimum: 0
        default: 0
    SizeParam:
      name: size
      in: query
      description: Количество элементов на странице
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

  responses:
    NotFound:
      description: Ресурс не найден
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string
              timestamp:
                type: string
                format: date-time